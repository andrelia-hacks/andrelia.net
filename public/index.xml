<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Andrelia Hacks Stuff</title>
    <link>/</link>
    <description>Recent content on Andrelia Hacks Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>copyleft 2024 andrelia, do whatever you want with this content</copyright>
    <lastBuildDate>Fri, 26 Apr 2024 09:55:12 -0400</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automate Postman Secret Scanning With Trufflehog</title>
      <link>/posts/automate-postman-secret-scanning-with-trufflehog/</link>
      <pubDate>Fri, 26 Apr 2024 09:55:12 -0400</pubDate>
      <guid>/posts/automate-postman-secret-scanning-with-trufflehog/</guid>
      <description>Introduction Unintentional secret exposure on the internet is a problem as old as the internet itself. While hunter2 may not have been the first password to be inadvertently shared for everyone to see, it has certainly not been the last. Since then, a significant number of new websites and tools have been released that make it even easier to accidentally disclose credentials, including passwords, private keys, API keys, and more. Some websites, such as Pastebin and its various clones, have been maliciously used to publish dumps of this information.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Unintentional secret exposure on the internet is a problem as old as the internet itself. While <code>hunter2</code> may not have been the first password to be <a href="https://archive.is/0y1yT">inadvertently shared for everyone to see</a>, it has certainly not been the last. Since then, a significant number of new websites and tools have been released that make it even easier to accidentally disclose credentials, including passwords, private keys, API keys, and more. Some websites, such as Pastebin and its various clones, have been maliciously used to publish dumps of this information. Others, like GitHub are taking active steps to detect and alert on these credentials to prevent their misuse. Lately, I have been working with a team that has been researching scanning for secrets in Postman.</p>
<h2 id="common-sources-of-secrets-in-postman">Common Sources of Secrets in Postman</h2>
<p>Postman offers a number of ways to manage data used in making API calls. Some of this is protected, but much of it is not. The most common sources of credentials are the request headers and environment variables. However, credentials can easily be found in a number of other places as well.</p>
<!-- raw HTML omitted -->
<figure><img src="/images/postman/environment.png"
         alt="A screenshot of part of the variables section of the environment tab in Postman"/><figcaption>
            <p>Environment Variables</p>
        </figcaption>
</figure>

<figure><img src="/images/postman/params.png"
         alt="A screenshot of part of the Params tab in a request in Postman"/><figcaption>
            <p>Params</p>
        </figcaption>
</figure>

<figure><img src="/images/postman/authorization.png"
         alt="A screenshot of part of the Authorization tab in a request in Postman"/><figcaption>
            <p>Authorization</p>
        </figcaption>
</figure>

<figure><img src="/images/postman/headers.png"
         alt="A screenshot of part of the Headers tab in a request in Postman"/><figcaption>
            <p>Headers</p>
        </figcaption>
</figure>

<!-- raw HTML omitted -->
<figure><img src="/images/postman/pre-request-script.png"
         alt="A screenshot of part of the Pre-request Script tab in a request in Postman"/><figcaption>
            <p>Params</p>
        </figcaption>
</figure>

<h2 id="starting-the-automation-process">Starting the Automation Process</h2>
<p>However, there is an easier way to programatically retrieve this information: using the Postman API. If you know the GUID of your target request, you can get the JSON data directly without an API key.</p>
<figure><img src="/images/postman/api.png"
         alt="A screenshot of the Postman API output of a request"/><figcaption>
            <p>Postman API</p>
        </figcaption>
</figure>

<p>This means that we can start with a file including a list of unique URLs found on the Postman network and filter to only the ones that contain request IDs:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>cat unique_urls.json |jq -r .[] &gt; urls
</span></span><span style="display:flex;"><span>grep &#34;/request/&#34; urls &gt; requests</span></span></code></pre></div><p>Then we can modify those URLs to use the Postman API syntax:</p>
<figure><img src="/images/postman/requests.png"
         alt="A screenshot a file containing a list of Postman API requests"/><figcaption>
            <p>Postman API Request URLs</p>
        </figcaption>
</figure>

<p>Fetch all of these URLs using your favorite tool, save them locally, and now you can use Trufflehog to scan for secrets in these request files.</p>
<figure><img src="/images/postman/trufflehog-filesystem.png"
         alt="A screenshot of a number of Trufflehog verified secrets"/><figcaption>
            <p>Verified Secrets</p>
        </figcaption>
</figure>

<p>This workflow is great, but we can go a step further and automate the process of fetching request IDs.</p>
<h2 id="automating-the-search">Automating the Search</h2>
<p>There are two ways to automate the search on Postman; however, it is worth noting that both methods are limited to 200 (ish) results. This means that more specific search terms will provide better results with a smaller number of requests hidden by this cap.</p>
<figure><img src="/images/postman/ws-search.png"
         alt="A screenshot of a request and response in Caido showing the parameters for the Web Socket method"/><figcaption>
            <p>Method 1: Websockets (POST <a href="https://web.postman.co/_api/ws/proxy">https://web.postman.co/_api/ws/proxy</a>)</p>
        </figcaption>
</figure>

<p>Using the Postman websockets API allows for a machine-friendly way to automatically gather data. This works well as long as Postman supports it and allows it to be used.</p>
<figure><img src="/images/postman/selenium-search.png"
         alt="A screenshot of the Selenium driven workflow method"/><figcaption>
            <p>Method 2: Selenium</p>
        </figcaption>
</figure>

<p>If (or when) the Postman websockets API becomes inaccessible for any reason, you can use Selenium or other browser automation tools that are typically used for integration testing to navigate the Postman website for you and extract relevant data.</p>
<h2 id="optimizing-the-search">Optimizing the Search</h2>
<p>In order to maximize the signal-to-noise ratio in a search in an attempt to stay below the results cap where possible, our team has created a tool that fetches domains that are in-scope for bug bounty programs: <a href="https://github.com/devcoinfet/postman_research">devcoinfet/postman_research</a>.</p>
<figure><img src="/images/postman/postman_research-tool.png"
         alt="A screenshot of the files and README of the postman_research GitHub repository"/><figcaption>
            <p>Postman scraping and parsing tooling</p>
        </figcaption>
</figure>

<p>This still has room for improvement in terms of reducing noise further; however, the tooling has already resulted in a number of reported findings.</p>
<h2 id="coming-soon-even-more-automation">Coming Soon: Even More Automation</h2>
<p>Recently, Truffle Security released a post on this subject (<a href="https://trufflesecurity.com/blog/postman-carries-lots-of-secrets">Postman Carries Lots of Secrets</a>) that details an additional tool we can use: using <code>trufflehog</code> to directly search target workspaces.</p>
<figure><img src="/images/postman/trufflehog-workspace.png"
         alt="A screenshot of the output of the trufflehog postman scan command"/><figcaption>
            <p>trufflehog &ndash;only-verified postman &ndash;token &ldquo;$POSTMAN_TOKEN&rdquo; &ndash;workspace=abcdef-1234-5678-9012-abcdef</p>
        </figcaption>
</figure>

<p>With this update to <code>trufflehog</code>, we can also search entire workspaces in a more efficient way.</p>
<h3 id="resources">Resources</h3>
<ul>
<li><a href="https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning">https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning</a></li>
<li><a href="https://hackerone.com/reports/1523651">https://hackerone.com/reports/1523651</a></li>
<li><a href="https://github.com/devcoinfet/postman_research">https://github.com/devcoinfet/postman_research</a></li>
<li><a href="https://trufflesecurity.com/blog/postman-carries-lots-of-secrets">https://trufflesecurity.com/blog/postman-carries-lots-of-secrets</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>T-Mobile: Signing Requests With Proof of Possession (PoP) Tokens</title>
      <link>/posts/t-mobile-signing-requests-with-proof-of-possession-pop-tokens/</link>
      <pubDate>Fri, 22 Mar 2024 14:11:45 -0400</pubDate>
      <guid>/posts/t-mobile-signing-requests-with-proof-of-possession-pop-tokens/</guid>
      <description>Introduction In a typical authenticated API, leaked credentials allow an attacker to make API requests as the associated user for as long as the credentials are valid. With many REST APIs, these credentials come in the form of a bearer token, typically using JSON Web Tokens (JWTs).
The OAuth 2.0 bearer token specification, as defined in RFC6750, allows any party in possession of a bearer token to get access to the associated resources without demonstrating possession of a cryptographic key.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In a typical authenticated API, leaked credentials allow an attacker to make API requests as the associated user for as long as the credentials are valid. With many REST APIs, these credentials come in the form of a bearer token, typically using JSON Web Tokens (JWTs).</p>
<p>The OAuth 2.0 bearer token specification, as defined in RFC6750, allows any party in possession of a bearer token to get access to the associated resources without demonstrating possession of a cryptographic key. Given the risk of exposure of these tokens, some organizations require additional security measures, such as request signing with a known keypair.</p>
<p>T-Mobile uses a method called proof of possession (PoP) which provides a mechanism to bind key material to OAuth tokens. The client can use a keypair to add a signature to the outgoing HTTP requests to the resource server. The resource server in turn can validate the signature and ensure that the key material provided by the sender is the same entity that requested the token in the first place (as opposed to someone who stole the token in transit or at rest). Further, each request is signed with its own PoP token, minimizing the risk of leaked access tokens being used across endpoints.</p>
<h2 id="pop-token-structure">PoP Token Structure</h2>
<p>The structure of the PoP token used by T-Mobile is:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Header: {alg, type}
</span></span><span style="display:flex;"><span>Body: {
</span></span><span style="display:flex;"><span>    iat: &lt;epoch time&gt;
</span></span><span style="display:flex;"><span>    exp: &lt;epoch time + 2 minutes&gt;
</span></span><span style="display:flex;"><span>    ehts: &lt;authorization; content_type; uri; http-method; body&gt; =&gt; All request headers, URI, HTTP method and body fields used to create hash
</span></span><span style="display:flex;"><span>    edts: &lt;Base64UrlSafeEncoding[SHA256(all ehts claim values as a concatenated string)]&gt;
</span></span><span style="display:flex;"><span>    jti: &lt;unique identifier&gt;
</span></span><span style="display:flex;"><span>    v: &#34;1&#34;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>Signature: &lt;digitalSignature&gt;</span></span></code></pre></div><p>This token is then passed to T-Mobile API endpoints via the <code>X-Authentication</code> header, along with the access token in the <code>Authorization</code> header.</p>
<p>This is an example PoP token:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MTExMTkwNTEsImV4cCI6MTcxMTExOTE3MSwiZWh0cyI6IkNvbnRlbnQtVHlwZTt1cmk7aHR0cC1tZXRob2QiLCJlZHRzIjoidHBBZG1QTWwyUV8yZlJVUjRPRWZsa25aUXR5VFloX3JLcVYzeXFiRFpBMCIsImp0aSI6ImZiMjc3ZGVmLTFkMDEtNDdiMy1hM2Q4LTk1NGJmY2MxNGY1OSIsInYiOjF9.HNfcPqaKufuj64eKDVgx-TahcM15PoCBJIE9RDJVirUMb4xOE0GhfxcXTmDyRVry-mlWp2czhS_cHQawXwvzdJ3SaJBQngWdQR8sApnaWcZcpjCjvysy5jxHEo3CSdKJdUNjA5Rzd7AboQaYpVvidwRUvhFdoUsOoXC3qVWiL1krqlwzHe-dvdKyRzdOSjmwuTHEGXmUS0WTm73449yzFoajgUJi4fh_Yi7Oz0Ac8o1jMh63GmtObA-D0uzQDMi-VVbrCsVhxDORL82xmuOoI1HyQZtZkjl69u1Ykgi-q5HjFNqm3YJC70QMfxcXNm9GFiC7X8X3T4tLr981_pDl5Q</span></span></code></pre></div><p>When decoded, it contains the following data:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    &#34;alg&#34;: &#34;RS256&#34;,
</span></span><span style="display:flex;"><span>    &#34;typ&#34;: &#34;JWT&#34;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    &#34;iat&#34;: 1711119051,
</span></span><span style="display:flex;"><span>    &#34;exp&#34;: 1711119171,
</span></span><span style="display:flex;"><span>    &#34;ehts&#34;: &#34;Content-Type;uri;http-method&#34;,
</span></span><span style="display:flex;"><span>    &#34;edts&#34;: &#34;tpAdmPMl2Q_2fRUR4OEflknZQtyTYh_rKqV3yqbDZA0&#34;,
</span></span><span style="display:flex;"><span>    &#34;jti&#34;: &#34;fb277def-1d01-47b3-a3d8-954bfcc14f59&#34;,
</span></span><span style="display:flex;"><span>    &#34;v&#34;: 1
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>&lt;signature&gt;</span></span></code></pre></div><h2 id="generating-a-pop-token">Generating a PoP Token</h2>
<p>The <code>edts</code> hash can be generated with the following data:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>POST /oauth2/v2/tokens
</span></span><span style="display:flex;"><span>Host core.saas.api.t-mobile.com
</span></span><span style="display:flex;"><span>Content-Type: application/json
</span></span><span style="display:flex;"><span>{&#34;cnf&#34;:&#34;-----BEGIN PUBLIC KEY-----...&#34;,&#34;client_id&#34;:&#34;SIDWeb&#34;}</span></span></code></pre></div><p>Resulting in the following payload:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>edtsString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application/json/oauth2/v2/tokensPOST&#34;</span>
</span></span><span style="display:flex;"><span>edts <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64encode(SHA256<span style="color:#f92672">.</span>new(bytes(edtsString, <span style="color:#e6db74">&#34;utf-8&#34;</span>))<span style="color:#f92672">.</span>digest())<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;=&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;+&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;_&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># tpAdmPMl2Q_2fRUR4OEflknZQtyTYh_rKqV3yqbDZA0</span></span></span></code></pre></div><p>The backend API server can then take the public key provided in the POST body and validate the headers specified in the <code>ehts</code> claim.</p>
<p>Here is some sample Python code to generate the PoP token for a given request:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime, timedelta, timezone
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> uuid
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Hash <span style="color:#f92672">import</span> SHA256
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> jwt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_pop_token</span>(priv_key, method, uri, headers<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, body<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    now <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now(tz<span style="color:#f92672">=</span>timezone<span style="color:#f92672">.</span>utc)
</span></span><span style="display:flex;"><span>    payload <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;iat&#34;</span>: int(now<span style="color:#f92672">.</span>timestamp()),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;exp&#34;</span>: int((now <span style="color:#f92672">+</span> timedelta(seconds<span style="color:#f92672">=</span><span style="color:#ae81ff">120</span>))<span style="color:#f92672">.</span>timestamp()),
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">**</span>headers,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;uri&#34;</span>: uri,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;http-method&#34;</span>: method
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> body:
</span></span><span style="display:flex;"><span>        data[<span style="color:#e6db74">&#39;body&#39;</span>] <span style="color:#f92672">=</span> body
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Creating ehts string...</span>
</span></span><span style="display:flex;"><span>    ehts <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    edtsString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>        ehts<span style="color:#f92672">.</span>append(k)
</span></span><span style="display:flex;"><span>        edtsString <span style="color:#f92672">+=</span> str(v)
</span></span><span style="display:flex;"><span>    payload[<span style="color:#e6db74">&#39;ehts&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;;&#39;</span><span style="color:#f92672">.</span>join(ehts)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Creating edts hash...</span>
</span></span><span style="display:flex;"><span>    hash <span style="color:#f92672">=</span> SHA256<span style="color:#f92672">.</span>new(bytes(edtsString, <span style="color:#e6db74">&#34;utf-8&#34;</span>))
</span></span><span style="display:flex;"><span>    edts <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64encode(hash<span style="color:#f92672">.</span>digest())<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;=&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;+&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;_&#34;</span>)
</span></span><span style="display:flex;"><span>    payload[<span style="color:#e6db74">&#39;edts&#39;</span>] <span style="color:#f92672">=</span> edts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    payload<span style="color:#f92672">.</span>update({
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;jti&#34;</span>: str(uuid<span style="color:#f92672">.</span>uuid4()),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;v&#34;</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> jwt<span style="color:#f92672">.</span>encode(payload, priv_key, algorithm<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;RS256&#34;</span>)</span></span></code></pre></div><h2 id="using-pop-tokens">Using PoP tokens</h2>
<p>Once you have the ability to generate PoP tokens, you can request an access token:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_access_token</span>(self) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    endpoint <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/oauth2/v2/tokens&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># These are the credentials associated with your T-Mobile app or user</span>
</span></span><span style="display:flex;"><span>    auth <span style="color:#f92672">=</span> HTTPBasicAuth(self<span style="color:#f92672">.</span>client_id, self<span style="color:#f92672">.</span>client_secret)
</span></span><span style="display:flex;"><span>    headers <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Content-Type&#34;</span>: <span style="color:#e6db74">&#34;application/json&#34;</span>}
</span></span><span style="display:flex;"><span>    headers[<span style="color:#e6db74">&#39;X-Authorization&#39;</span>] <span style="color:#f92672">=</span> get_pop_token(self<span style="color:#f92672">.</span>priv_key, <span style="color:#e6db74">&#34;POST&#34;</span>, endpoint, headers<span style="color:#f92672">=</span>headers)
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>base_url<span style="color:#e6db74">}{</span>endpoint<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, auth<span style="color:#f92672">=</span>auth, headers<span style="color:#f92672">=</span>headers)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>json()[<span style="color:#e6db74">&#39;access_token&#39;</span>]</span></span></code></pre></div><p>And then finally you can put it all together to make an authenticated request to an API like this one for DevEdge:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">devices</span>(self, iccid: str) <span style="color:#f92672">-&gt;</span> Dict[Any, Any]:
</span></span><span style="display:flex;"><span>    endpoint <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;/iot-connectivity/v1/devices/</span><span style="color:#e6db74">{</span>iccid<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    headers <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Content-Type&#34;</span>: <span style="color:#e6db74">&#34;application/json&#34;</span>}
</span></span><span style="display:flex;"><span>    headers[<span style="color:#e6db74">&#39;X-Authorization&#39;</span>] <span style="color:#f92672">=</span> get_pop_token(self<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>priv_key, <span style="color:#e6db74">&#34;GET&#34;</span>, endpoint, headers<span style="color:#f92672">=</span>headers)
</span></span><span style="display:flex;"><span>    headers[<span style="color:#e6db74">&#39;Authorization&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Bearer </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>_access_token()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>base_url<span style="color:#e6db74">}{</span>endpoint<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, headers<span style="color:#f92672">=</span>headers)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r<span style="color:#f92672">.</span>json()</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
